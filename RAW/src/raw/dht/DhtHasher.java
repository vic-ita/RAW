/*******************************************************************************
 *  Copyright 2017 Vincenzo-Maria Cappelleri <vincenzo.cappelleri@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package raw.dht;

import org.apache.commons.codec.DecoderException;

/**
 * Objects from this interface should
 * generate a valid {@link DhtID} by
 * applying a single pass of SHA-256
 * to a given input.
 *  
 * @author vic
 *
 */
public interface DhtHasher {
	
	/**
	 * Generate an {@link DhtID} from an
	 * arbitrary byte array.
	 * 
	 * @param bytes the byte array to be digested
	 * @return a valid {@link DhtID}
	 */
	public DhtID hashBytes(byte[] bytes);
	
	/**
	 * Generate an {@link DhtID} from an
	 * arbitrary string.
	 * 
	 * @param string a string to be digested
	 * @return a valid {@link DhtID}
	 */
	public DhtID hashString(String string);
	
	/**
	 * Generate an {@link DhtID} from an
	 * arbitrary hexadecimal string.
	 * 
	 * @param string an hexadecimal string to be digested
	 * @return a valid {@link DhtID}
	 * @throws DecoderException if hex is not a valide hexadecimal string
	 */
	public DhtID hashHexString(String hex) throws DecoderException;
	
	/**
	 * Hashes a {@link DhtID} with a long nonce
	 * value. This method is meant to be used
	 * to verify the proof of continuous work
	 * for a given node.
	 * 
	 * @param id a {@link DhtID}
	 * @param nonce a long nonce token
	 * @return a {@link DhtID}
	 */
	public DhtID hashDhtIDwithLongNonce(DhtID id, long nonce);
	
	/**
	 * @return the number of bytes of an hash generated by {@link DhtHasher}
	 */
	public int hashLength();

}
